{
  "version": 3,
  "sources": ["../../svelte/src/legacy/legacy-server.js"],
  "sourcesContent": ["/** @import { SvelteComponent } from '../index.js' */\r\nimport { asClassComponent as as_class_component, createClassComponent } from './legacy-client.js';\r\nimport { render } from '../internal/server/index.js';\r\n\r\n// By having this as a separate entry point for server environments, we save the client bundle from having to include the server runtime\r\n\r\nexport { createClassComponent };\r\n\r\n/**\r\n * Takes a Svelte 5 component and returns a Svelte 4 compatible component constructor.\r\n *\r\n * @deprecated Use this only as a temporary solution to migrate your imperative component code to Svelte 5.\r\n *\r\n * @template {Record<string, any>} Props\r\n * @template {Record<string, any>} Exports\r\n * @template {Record<string, any>} Events\r\n * @template {Record<string, any>} Slots\r\n *\r\n * @param {SvelteComponent<Props, Events, Slots>} component\r\n * @returns {typeof SvelteComponent<Props, Events, Slots> & Exports}\r\n */\r\nexport function asClassComponent(component) {\r\n\tconst component_constructor = as_class_component(component);\r\n\t/** @type {(props?: {}, opts?: { $$slots?: {}; context?: Map<any, any>; }) => { html: any; css: { code: string; map: any; }; head: string; } } */\r\n\tconst _render = (props, { context } = {}) => {\r\n\t\t// @ts-expect-error the typings are off, but this will work if the component is compiled in SSR mode\r\n\t\tconst result = render(component, { props, context });\r\n\t\treturn {\r\n\t\t\tcss: { code: '', map: null },\r\n\t\t\thead: result.head,\r\n\t\t\thtml: result.body\r\n\t\t};\r\n\t};\r\n\t// @ts-expect-error this is present for SSR\r\n\tcomponent_constructor.render = _render;\r\n\r\n\t// @ts-ignore\r\n\treturn component_constructor;\r\n}\r\n\r\n/**\r\n * Runs the given function once immediately on the server, and works like `$effect.pre` on the client.\r\n *\r\n * @deprecated Use this only as a temporary solution to migrate your component code to Svelte 5.\r\n * @param {() => void | (() => void)} fn\r\n * @returns {void}\r\n */\r\nexport function run(fn) {\r\n\tfn();\r\n}\r\n\r\nconst noop = () => {};\r\n\r\n// event stuff, no need to worry about it for SSR but needs to be there or it will crash\r\nexport {\r\n\tnoop as handlers,\r\n\tnoop as createBubbler,\r\n\tnoop as once,\r\n\tnoop as preventDefault,\r\n\tnoop as self,\r\n\tnoop as stopImmediatePropagation,\r\n\tnoop as stopPropagation,\r\n\tnoop as trusted,\r\n\tnoop as passive,\r\n\tnoop as nonpassive\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;AAqBO,SAASA,kBAAiB,WAAW;AAC3C,QAAM,wBAAwB,iBAAmB,SAAS;AAE1D,QAAM,UAAU,CAAC,OAAO,EAAE,QAAQ,IAAI,CAAC,MAAM;AAE5C,UAAM,SAAS,OAAO,WAAW,EAAE,OAAO,QAAQ,CAAC;AACnD,WAAO;AAAA,MACN,KAAK,EAAE,MAAM,IAAI,KAAK,KAAK;AAAA,MAC3B,MAAM,OAAO;AAAA,MACb,MAAM,OAAO;AAAA,IACd;AAAA,EACD;AAEA,wBAAsB,SAAS;AAG/B,SAAO;AACR;AASO,SAAS,IAAI,IAAI;AACvB,KAAG;AACJ;AAEA,IAAM,OAAO,MAAM;AAAC;",
  "names": ["asClassComponent"]
}
